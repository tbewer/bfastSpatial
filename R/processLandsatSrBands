processLandsatSrBands <- function(x, band="band1", srdir, outdir, untar=TRUE, mask=NULL, ...) {
  # x is the full path of a tarball containing the Landsat data or the path of a hdf file
  # hdf dir is where the hdf files are extracted
  # Output layers (band1 for example) are generated in outdir
  # ... arguments to be passed to hdf2band1 (filename is automatically generated and therefore does not need to be passed)
  
  # Although x can be a zip archive, Names are untar, tarlist, etc, since the function was first developped to deal with tar.gz compressed Landsat data
  if(untar){
    ex <- extension(x)
    if(ex == '.gz') {
      tarlist <- untar(x, list=TRUE)
    } else if(ex == '.zip') {
      tarlist <- unzip(x, list=TRUE)$Name
    } else {
      stop('The archive is neither tar.gz nor .zip; we don\'t know what to do with that.')
    }
    
    if(any(grepl(pattern="^.*\\.hdf$", x=tarlist))) { # are there any hdf files
      x0 <- grep(pattern="^.*\\.hdf$", x=tarlist, value=TRUE)
    } else if (any(grepl(pattern="^.*\\.tif$", x=tarlist))) { # Contains tiff
      if(any(grepl(pattern=sprintf("^.*sr_%s\\.tif$", band), x=tarlist))) { # Contains pre-processed band
        x0 <- grep(pattern=sprintf("^.*sr_%s\\.tif$", band), x=tarlist, value=TRUE)
      } else {
        stop("Unsupported band")
      }
    } else {
      stop("Did not find any .tif or .hdf files in the archive")
    }
    if (!is.null(mask)) {
      x0 <- c(x0, grep(pattern=sprintf("^.*%s\\.tif$", mask), x=tarlist, value=TRUE))
    }
    if(ex == '.gz') {
      untar(x, files=x0, exdir=srdir)
    } else if(ex == '.zip') {
      unzip(x, files=x0, exdir=srdir)
    }
    
    x <- file.path(srdir, x0)
  }
  name <- str_extract(string=basename(x[1]), '(LT4|LT5|LE7|LC8)\\d{13}')   
  # Also note that in case of geotiff length(x)>1
  extractBands(x=x, band=band, filename=sprintf('%s/%s.%s.grd', outdir, band, name), datatype='INT2S', mask=mask, ...)
}
